""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugins
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ln -s ~/dotfiles/vim/.vimrc ~/.vimrc

set nocompatible                  " Use Vim settings, rather then Vi settings
filetype off

" load plugins from vundle
set rtp+=~/.vim/bundle/Vundle.vim

runtime macros/matchit.vim        " Enable built-in matchit plugin

call vundle#begin()

Plugin 'VundleVim/Vundle.vim'     " let Vundle manage Vundle, required

" interface
Plugin 'nanotech/jellybeans.vim'

" Utilities
Plugin 'kien/ctrlp.vim'
Plugin 'jiangmiao/auto-pairs'
Plugin 'ryanoasis/vim-devicons'   " icons
Plugin 'scrooloose/syntastic'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-commentary'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'christoomey/vim-tmux-runner'
Plugin 'bling/vim-airline'
Plugin 'scrooloose/nerdtree'
Plugin 'kana/vim-textobj-user'

" Ruby and Rails
Plugin 'tpope/vim-rails'
Plugin 'vim-ruby/vim-ruby'
Plugin 'thoughtbot/vim-rspec'
Plugin 'nelstrom/vim-textobj-rubyblock'
Plugin 'tpope/vim-bundler'
Plugin 'tpope/vim-rake'
Plugin 'tpope/vim-dispatch'

" GIT
Plugin 'tpope/vim-fugitive'

" Snippets
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'Valloric/YouCompleteMe'
Bundle 'ervandew/supertab'

call vundle#end()
filetype plugin indent on

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let mapleader = "\<Space>"        " leader now is a space

set autoread                      " detect when a file is changed
set visualbell
set noerrorbells
syntax on                         " switch syntax highlighting on

" Remove backup and swapfiles
set nobackup
set nowritebackup
set noswapfile

" Tab control
set expandtab                     " change <tab> to space (2)
set smarttab                      " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=2                     " the visible width of tabs
set softtabstop=2                 " edit as if the tabs are 2 characters wide
set shiftwidth=2                  " number of spaces to use for indent and unindent
set shiftround                    " round indent to a multiple of 'shiftwidth'

autocmd FileType snippets setlocal noexpandtab

" Searching
set ignorecase                    " case insensitive searching
set smartcase                     " case-sensitive if expresson contains a capital letter
set hlsearch                      " highlight all matche, after enter search patter
set incsearch                     " set incremental search, like modern browsers

" code folding settings
set foldmethod=syntax             " fold based on indent
set foldnestmax=10                " deepest fold is 10 levels
set nofoldenable                  " don't fold by default
set foldlevel=1

" invisible chars
set list
set listchars=tab:▸\ ,eol:¬

if has('mouse')
    set mouse=a
    set ttymouse=xterm2
endif

set clipboard=unnamed

set ttyfast                      " faster redrawing
set showmatch                    " show matching braces
set mat=2                        " how many tenths of a second to blink
set autoindent                   " automatically set indent of new line
set smartindent
set laststatus=2                 " show the status line all the time
set magic                        " Set magic on, for regex
set textwidth=100

set relativenumber
set number                       " Display line numbers beside buffer

autocmd InsertEnter * :set number norelativenumber
autocmd InsertLeave * :set relativenumber

set hidden                      " Allow buffer change w/o saving
set lazyredraw                  " Don't update while executing macros
set backspace=indent,eol,start  " Sane backspace behavior
set history=1000                " Remember last 1000 commands
set scrolloff=4                 " Keep at least 4 lines below cursor

set encoding=utf8
set t_Co=256                    " Explicitly tell vim that the terminal supports 256 colors
set background=dark
colorscheme jellybeans

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

inoremap jk <esc>
inoremap <esc> <nop>

" moving up and down work as you would expect
nnoremap <silent> j gj
nnoremap <silent> k gk

" disable arrows to change my behaviour
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
nnoremap j gj
nnoremap k gk

" edit vimrc and load vimrc bindings
nnoremap <leader>ev :vsp $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

" Buffers
nnoremap <leader>bn :bn<CR>               " Next buffer
nnoremap <leader>bp :bp<CR>               " Previous buffer
nnoremap <leader>bq :bp <BAR> bd #<CR>    " Close the current buffer and move to the previous one
nmap <leader>. <c-^>                      " switch between current and last buffer

" Splits
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" TMUX conf
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

autocmd VimResized * :wincmd =            " automatically rebalance windows on vim resize

" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

nmap \q :nohlsearch<CR>                   " Clear the highlight search

" don't need shift for :
nnoremap ; :
vnoremap ; :

nmap <leader>, :w<CR>                     " save


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugins Settings and Mappings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Mappings

nnoremap <leader>ue :UltiSnipsEdit<cr>        " Edit Snippets
map ++ :NERDTreeToggle<CR>                    " NERDtree

" RSpec.vim
map <Leader>t :w<cr>:call RunCurrentSpecFile()<CR>
map <Leader>a :w<cr>:call RunAllSpecs()<CR>
map <Leader>l :w<cr>:call RunLastSpec()<CR>
map <Leader>s :w<cr>:call RunNearestSpec()<CR>

" ctrlp conf
let g:ctrlp_match_window_bottom = 0
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_custom_ignore = '\v\~$|\.(o|swp|pyc|wav|mp3|ogg|blend)$|(^|[/\\])\.(hg|git|bzr)'
let g:ctrlp_working_path_mode = 0
let g:ctrlp_dotfiles = 0
let g:ctrlp_switch_buffer = 0
let g:ctrlp_use_caching = 0

" Airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

" configure syntastic syntax checking to check on open as well as save
let g:syntastic_ruby_checkers = ['mri']
let g:syntastic_enable_highlighting=0

" Complete
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1

let g:ycm_filetype_blacklist = {}

let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']

let g:SuperTabDefaultCompletionType    = '<C-n>'
let g:SuperTabCrMapping                = 0

let g:UltiSnipsExpandTrigger="<c-k>"
let g:UltiSnipsJumpForwardTrigger="<c-k>"
let g:UltiSnipsJumpBackwardTrigger="<s-c-j"

let g:UltiSnipsEditSplit='vertical'
let g:UltiSnipsExpandTrigger           = '<tab>'
let g:UltiSnipsJumpForwardTrigger      = '<tab>'
let g:UltiSnipsJumpBackwardTrigger     = '<s-tab>'

" set nerdtree window size, map ++ to open NERDtree panel
let NERDTreeWinSize=50

" dispatch.vim
let g:rspec_command = "Dispatch rspec {spec}"

